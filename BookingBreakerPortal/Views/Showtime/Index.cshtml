@using System.Globalization;

@{
    ViewBag.Title = "Showtime";
    Layout = "~/Views/Shared/Layout.cshtml";
}
@model List<BookingDataAccess.ShowTime>

<link href="~/Content/seat-charts/jquery.seat-charts.css" type="text/css" rel="stylesheet" />
<link href="~/Content/customStyle/seatchartsCustom.css" type="text/css" rel="stylesheet" />
<script src="~/Scripts/seat-charts/jquery.seat-charts.min.js"></script>

<script language="Javascript">

    function checkShowUpToDate()
    {
        $('table#showsTable tbody tr').each(function (index, element) {
            var lul = $(element).find('a').data('checktime');
            var kek = $(element).find('a');
            var azaza = kek.data('checktime');
            var lil = new Date().getTime();
            if ($(element).find('a').data('checktime') < new Date().getTime() + 80000)
            {
                $(element).addClass('hideMe');
            }
        });
    }

    $(document).ready(function () {

        checkShowUpToDate();
        setInterval(checkShowUpToDate, 60000);
        $('#showsTable').removeClass('invisible');

        $('#placesModal').modal();
        $('.placesButton').click(function () {
            var $this = $(this);
            $.ajax({
                url: '/ShowTime/GetShowPlacesForShowPlace?showtimeId=' + $this.data('showtimeid'),
                success: function (data) {
                    if (data.length > 0) {
                        $('#placeModalTitle').text($this.data('title') + ' в ' + $this.data('cinema'));
                        $('#placesLink').attr('href', $this.data('link'));
                        $('#modalTime').text($this.data('starttime'));
                        var placesObj = {};
                        for (var i = 0; i < data.length; i++) {
                            var currentPlace = data[i];
                            if (placesObj[currentPlace.Row] !== undefined) {
                                placesObj[currentPlace.Row].push(currentPlace)
                            }
                            else {
                                placesObj[currentPlace.Row] = [currentPlace];
                            }
                        }
                        var index = 1;
                        var maxLength = 0;
                        var seatMap = [];
                        function getRowMapRepresentation(rowArray) {
                            var result = '';
                            for (var i = 0; i < rowArray.length; i++) {
                                var currentArrayMember = rowArray[i];
                                if (currentArrayMember.PlaceAccess == 0) {
                                    result += 'o';
                                }
                                else if (currentArrayMember.PlaceAccess == 1) {
                                    result += 't';
                                }
                                else if (currentArrayMember.PlaceAccess == 3) {
                                    result += 'd';
                                }
                                else {
                                    result += 'b';
                                }
                            }

                            return result;
                        }

                        while (true) {
                            if (placesObj[index] === undefined) {
                                break;
                            }
                            if (maxLength < placesObj[index].length) {
                                maxLength = placesObj[index].length;
                            }

                            placesObj[index].sort(function (a, b) {
                                return a.PlaceNumber - b.PlaceNumber;
                            });

                            seatMap[index - 1] = getRowMapRepresentation(placesObj[index]);

                            index++;
                        }

                        for (var i = 0; i < seatMap.length; i++) {
                            if (seatMap[i].length < maxLength) {
                                seatMap[i] += Array(maxLength + 1 - seatMap[i].length).join('_');
                            }
                        }

                        $('.seatCharts-row').remove();
                        $('.seatCharts-legendItem').remove();
                        $('#seatMap').unbind().removeData();

                        if (maxLength > 20)
                        {
                            $('#seatMap').removeClass('l8').addClass('l12');
                        }
                        else
                        {
                            $('#seatMap').removeClass('l12').addClass('l8');
                        }

                        $('#seatMap').seatCharts({
                            map: seatMap,
                            seats: {
                                o: {
                                    classes: 'openSeat',
                                    category: 'Open'
                                },
                                t: {
                                    classes: 'takenSeat',
                                    category: 'Taken'
                                },
                                b: {
                                    classes: 'bronedSeat',
                                    category: 'Broned'
                                },
                                d: {
                                    classes: 'disabledSeat',
                                    category: 'Disabled'
                                },

                            },
                            naming: {
                                top: false,
                                getLabel: function (character, row, column) {
                                    return column;
                                },
                            },
                            legend: {
                                node: $('#legendCharts'),
                                items: [
                                    ['o', 'unavailable', 'Свободно'],
                                    ['t', 'unavailable', 'Занято'],
                                    ['b', 'unavailable', 'Забронировано'],
                                    ['d', 'unavailable', 'Недоступно']
                                ]
                            }

                        });
                        $('#placesModal').modal('open');
                    }
                    else {

                    }
                }
            });

        });
    });

    var placesAccessDict = { '0': 'Open', '1': 'Taken', '2': 'Broned' };

    function generateTable(places) {
        var result = '<thead>< tr ><th>Ряд</th><th>Место</th><th>Доступность</th><th></th></tr ></thead ><tbody>';

        for (var i = 0; i < places.length; i++) {
            var currentPlace = places[i];
            result += '<tr><td>' + currentPlace.Row + '</td><td>' + currentPlace.PlaceNumber + '</td><td>' + placesAccessDict[currentPlace.PlaceAccess] + '</td></tr>';
        }

        return result + '</tbody>';

    }

</script>

<div class="section">
    <div class="container">
        <br><br>
        <h2 class="header">Сеансы</h2>
        <br><br>
        <table id="showsTable" class="invisible">
            <thead>
                <tr>
                    <th>Фильм</th>
                    <th>Кинотеатр</th>
                    <th>Начало сеанса</th>
                    <th></th>
                </tr>
            </thead>

            <tbody>
                @foreach (var showtime in Model)
                {
                    var time = showtime.StartTime.ToString("m", CultureInfo.CreateSpecificCulture("ru-RU")) + " " + showtime.StartTime.ToString("t", CultureInfo.CreateSpecificCulture("ru-RU"));
                    <tr>
                        <td>@showtime.Movie.Title</td>
                        <td>@showtime.CinemaHall.Cinema.Title</td>
                        <td>@time</td>
                        <td><a data-link="@showtime.Link" data-checktime="@((showtime.StartTime.ToUniversalTime() -  new DateTime(1970, 1, 1)).Ticks /TimeSpan.TicksPerMillisecond)" data-starttime="@time" data-title="@showtime.Movie.Title" data-cinema="@showtime.CinemaHall.Cinema.Title" data-showtimeid="@showtime.ShowTimeId" class=" placesButton waves-effect waves-light btn orange">Места</a></td>
                    </tr>
                }
            </tbody>
        </table>
        <br><br>
    </div>
</div>

<div id="placesModal" class="modal">
    <div class="modal-content">
        <h4 id="placeModalTitle" class="centerText">Film Title</h4>
        <p id="modalTime" class="centerText"></p>
        <div class="row">
            <div id="seatMap" class="col l8 s12">

            </div>

            <div id="legendCharts" class="col l4 s12">
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <a id="placesLink" target="_blank" href="#" class="modal-action modal-close waves-effect waves-green btn-flat">Купить билеты можно здесь</a>
    </div>
</div>

